diff --git a/AssetTools.NET/Extra/AssetsManager/AssetsManager.cs b/AssetTools.NET/Extra/AssetsManager/AssetsManager.cs
index f8b28a2..f278979 100644
--- a/AssetTools.NET/Extra/AssetsManager/AssetsManager.cs
+++ b/AssetTools.NET/Extra/AssetsManager/AssetsManager.cs
@@ -182,7 +182,15 @@ namespace AssetsTools.NET.Extra
 
         public AssetTypeInstance GetATI(AssetsFile file, AssetFileInfoEx info, bool forceFromCldb = false)
         {
-            ushort scriptIndex = file.typeTree.unity5Types[info.curFileTypeOrIndex].scriptIndex;
+            ushort scriptIndex;
+            if (info.curFileTypeOrIndex == -1)
+                scriptIndex = (ushort)(info.curFileTypeOrIndex - 1);
+            else if (info.curFileType == info.curFileTypeOrIndex)
+                scriptIndex = 0;
+            else
+                scriptIndex = file.typeTree.unity5Types[info.curFileTypeOrIndex].scriptIndex;
+
+            //ushort scriptIndex = file.typeTree.unity5Types[info.curFileTypeOrIndex].scriptIndex;
             uint fixedId = AssetHelper.FixAudioID(info.curFileType);
 
             bool hasTypeTree = file.typeTree.hasTypeTree;
diff --git a/AssetsView/Util/AssetUtils.cs b/AssetsView/Util/AssetUtils.cs
index faad5ed..218ab41 100644
--- a/AssetsView/Util/AssetUtils.cs
+++ b/AssetsView/Util/AssetUtils.cs
@@ -27,5 +27,13 @@ namespace AssetsView.Util
             }
             return true;
         }
+
+        //used as sort of a hack to handle both second and component
+        //in m_Component which both have the pptr as the last field
+        //(pre 5.5 has a first and second while post 5.5 has component)
+        public static AssetTypeValueField GetLastChild(this AssetTypeValueField atvf)
+        {
+            return atvf[atvf.childrenCount - 1];
+        }
     }
 }
diff --git a/AssetsView/Winforms/GameObjectViewer.cs b/AssetsView/Winforms/GameObjectViewer.cs
index 9e03069..40b4b53 100644
--- a/AssetsView/Winforms/GameObjectViewer.cs
+++ b/AssetsView/Winforms/GameObjectViewer.cs
@@ -111,7 +111,7 @@ namespace AssetsView.Winforms
             int componentSize = components.GetValue().AsArray().size;
             for (int i = 0; i < componentSize; i++)
             {
-                AssetTypeValueField componentPtr = components[i].Get("component");
+                AssetTypeValueField componentPtr = components[i].GetLastChild();
                 if (ModifierKeys == Keys.Shift)
                 {
                     AssetExternal ext = helper.GetExtAsset(inst, componentPtr);
@@ -250,7 +250,7 @@ namespace AssetsView.Winforms
                 helper.GetExtAsset(inst, field.Get("m_Component")
                                               .Get("Array")
                                               .Get(0)
-                                              .Get("component")).instance
+                                              .GetLastChild()).instance
                                               .GetBaseField()
                                               .Get("m_Children")
                                               .Get("Array");
diff --git a/AssetsView/Winforms/StartScreen.cs b/AssetsView/Winforms/StartScreen.cs
index 377eaec..43708e9 100644
--- a/AssetsView/Winforms/StartScreen.cs
+++ b/AssetsView/Winforms/StartScreen.cs
@@ -483,7 +483,7 @@ namespace AssetsView.Winforms
             {
                 AssetTypeValueField baseField = helper.GetATI(correctAti.file, info).GetBaseField();
 
-                AssetTypeValueField transformPtr = baseField["m_Component"]["Array"][0]["component"];
+                AssetTypeValueField transformPtr = baseField["m_Component"]["Array"][0].GetLastChild();
                 AssetTypeValueField transform = helper.GetExtAsset(correctAti, transformPtr).instance.GetBaseField();
                 baseField = GetRootTransform(helper, currentFile, transform);
                 AssetTypeValueField gameObjectPtr = baseField["m_GameObject"];
